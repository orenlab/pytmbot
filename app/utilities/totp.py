#!/venv/bin/python3
"""
(c) Copyright 2024, Denis Rozhnovskiy <pytelemonbot@mail.ru>
pyTMBot - A simple Telegram bot to handle Docker containers and images,
also providing basic information about the status of local servers.
"""
import base64
import hashlib
import io

import pyotp
import qrcode

from app import bot_logger
from app import config


class TwoFactorAuthenticator:
    def __init__(self, user_id, username):
        self.user_id: int = user_id
        self.username = username
        self.salt: str = config.auth_salt.get_secret_value()

    def __generate_secret(self) -> str:
        """
        Generates a secret key for TOTP (Time-based One-Time Password) authentication.

        The secret key is generated by hashing the concatenation of the user ID and username.

        Returns:
            str: The base32 encoded secret key.
        """
        # Concatenate the user ID and username
        message = str(self.user_id).encode() + self.salt.encode() + self.username.encode()

        # Hash the concatenated message using SHA256
        h = hashlib.sha256(message)

        # Encode the hash digest as base32 and decode it to a string
        return base64.b32encode(h.digest()).decode()

    @bot_logger.catch()
    def __generate_totp_auth_uri(self) -> str:
        """
        Generates a TOTP authentication URI using the secret key and account information.

        Returns:
            str: The generated TOTP authentication URI.
        """
        # Generate TOTP object using the secret key
        totp = pyotp.TOTP(self.__generate_secret())

        # Generate the URI using the TOTP object and account name
        uri = totp.provisioning_uri(name=self.username, issuer_name="pyTMbot TOTP")

        # Return the generated TOTP authentication URI
        return uri

    def generate_totp_qr_code(self) -> bytes:
        """
        Generates a QR code for two-factor authentication.

        Returns:
            bytes: The generated QR code as bytes.
        """
        # Start logging the generation process
        bot_logger.debug(f'Start generating TOTP QR code for user {self.username}...')

        # Generate the TOTP authentication URI
        auth_uri = self.__generate_totp_auth_uri()

        # Create a QR code from the authentication URI
        qr_code = qrcode.make(auth_uri)

        # Save the QR code as bytes in a BytesIO object
        with io.BytesIO() as img_bytes:
            qr_code.save(img_bytes)

            bot_logger.debug(f'TOTP QR code for user {self.username} generated.')
            # Return the bytes of the QR code
            return img_bytes.getvalue()

    def verify_totp_code(self, code: str) -> bool:
        """
        Verifies the TOTP code for the user.

        Args:
            code (str): The TOTP code to be verified.

        Returns:
            bool: True if the TOTP code is verified, False otherwise.
        """
        # Generate TOTP object using the secret key
        totp = pyotp.TOTP(self.__generate_secret())

        # Log the verification process
        bot_logger.debug(f'Verifying TOTP code for user {self.username}...')

        # Verify the TOTP code
        if totp.verify(code):
            bot_logger.log("SUCCESS", f'TOTP code for user {self.username} verified.')
            return True

        bot_logger.error(f'Failed to verify TOTP code for user {self.username}.')
        return False
