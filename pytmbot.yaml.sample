################################################################
# General Bot Settings
################################################################
# Bot Token Configuration
bot_token:
  # Production bot token (REQUIRED)
  # Get your bot token from @BotFather on Telegram
  prod_token:
    - 'YOUR_PROD_BOT_TOKEN'  # Example: '1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijk'

  # Development bot token (OPTIONAL)
  # Use separate bot for testing to avoid conflicts
  dev_bot_token:
    - 'YOUR_DEV_BOT_TOKEN'    # Example: '9876543210:ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqp'

# Access Control Settings (REQUIRED)
access_control:
  # User IDs allowed to access the bot (REQUIRED)
  # To get your user ID:
  #   Method 1: Send a message to @userinfobot on Telegram
  #   Method 2: Start your bot and send any message - check logs for user ID
  allowed_user_ids:
    - 123456789    # Replace with actual Telegram user ID (number only)
    - 987654321    # You can add multiple user IDs

  # Admin IDs with elevated permissions (REQUIRED)
  # Admins can access sensitive commands
  allowed_admins_ids:
    - 123456789    # Replace with actual admin Telegram user ID

  # Salt for TOTP (Time-Based One-Time Password) generation (REQUIRED)
  # Generate with: docker run --rm orenlab/pytmbot:latest --salt
  # Or use: openssl rand -hex 32
  # Or use any random 32+ character string
  auth_salt:
    - 'your-secret-random-32-char-salt-here-replace-this-value'

# Chat ID Configuration (REQUIRED)
chat_id:
  # Global chat ID for notifications (REQUIRED)
  # For private chat: use your user ID (positive number)
  # For group chat: use group ID (negative number, starts with -)
  # To get chat ID:
  #   Method 1: For groups - add @userinfobot to group and send any message
  #   Method 2: Start your bot and send message - check logs for chat ID
  global_chat_id:
    - -1001234567890  # Example: group chat ID (negative number)
    # - 123456789     # Alternative: private chat ID (positive number)

################################################################
# Docker Settings (REQUIRED)
################################################################
docker:
  # Docker socket path (REQUIRED)
  # Default for Linux: unix:///var/run/docker.sock
  # For Windows: npipe:////./pipe/docker_engine
  host:
    - 'unix:///var/run/docker.sock'

  # Enable Docker client debug logging (OPTIONAL)
  # WARNING: Produces many logs when monitor plugin is enabled
  debug_docker_client: false  # true or false

################################################################
# Webhook Configuration (OPTIONAL)
################################################################
# Only needed if you want to use webhooks instead of polling
# SECURITY: Bot automatically generates random webhook paths and secret tokens
# for enhanced security against unauthorized access
webhook_config:
  # Webhook URL (REQUIRED if using webhooks)
  # Must be accessible from the internet and have valid SSL
  # Bot will automatically append secure random path like: /webhook/RANDOM_STRING/BOT_TOKEN/
  url:
    - 'your-domain.com'  # Replace with your domain (without https:// and path)

  # External webhook port (REQUIRED if using webhooks)
  webhook_port:
    - 8443  # Standard HTTPS port (recommended)
    # - 8443  # Alternative port (allowed by Telegram)

  # Local application port (REQUIRED if using webhooks)
  # Must be >= 1024 (non-privileged port)
  local_port:
    - 5001  # Internal port for the bot application

  # SSL certificate path (OPTIONAL for HTTPS webhooks)
  cert:
    - '/path/to/your/certificate.pem'  # Replace with actual certificate path

  # SSL private key path (OPTIONAL for HTTPS webhooks)
  cert_key:
    - '/path/to/your/private.key'      # Replace with actual private key path

################################################################
# Plugins Configuration (OPTIONAL)
################################################################
plugins_config:
  # System Monitoring Plugin Configuration
  monitor:
    # Resource usage thresholds (all values in percentage or Celsius)
    tracehold:
      # CPU usage threshold (0-100%)
      cpu_usage_threshold:
        - 80  # Alert when CPU usage exceeds 80%

      # Memory usage threshold (0-100%)
      memory_usage_threshold:
        - 80  # Alert when memory usage exceeds 80%

      # Disk usage threshold (0-100%)
      disk_usage_threshold:
        - 80  # Alert when disk usage exceeds 80%

      # CPU temperature threshold (Celsius)
      cpu_temperature_threshold:
        - 85  # Alert when CPU temperature exceeds 85°C

      # GPU temperature threshold (Celsius)
      gpu_temperature_threshold:
        - 90  # Alert when GPU temperature exceeds 90°C

      # Disk temperature threshold (Celsius)
      disk_temperature_threshold:
        - 60  # Alert when disk temperature exceeds 60°C

    # Maximum notifications before stopping alerts
    max_notifications:
      - 3  # Stop sending alerts after 3 notifications for same issue

    # Check interval in seconds
    check_interval:
      - 5  # Check system status every 5 seconds

    # Reset notification count after X minutes
    reset_notification_count:
      - 5  # Reset notification counter after 5 minutes

    # Retry attempts for failed monitoring
    retry_attempts:
      - 3  # Try 3 times before giving up

    # Interval between retry attempts in seconds
    retry_interval:
      - 10  # Wait 10 seconds between retries

    # Monitor Docker containers and images
    monitor_docker: true  # true = monitor Docker, false = don't monitor

  # Outline VPN Plugin Configuration
  outline:
    # Outline VPN API URL (REQUIRED if using Outline plugin)
    # Get this from your Outline VPN server management interface
    api_url:
      - 'https://your-outline-server.com:12345/api'  # Replace with your API URL

    # Certificate fingerprint (REQUIRED if using Outline plugin)
    # Get this from your Outline VPN server
    cert:
      - 'YOUR_OUTLINE_CERT_FINGERPRINT'  # Replace with actual certificate fingerprint

################################################################
# InfluxDB Settings (OPTIONAL)
################################################################
# Only needed if you want to store monitoring data in InfluxDB
influxdb:
  # InfluxDB server URL (REQUIRED if using InfluxDB)
  url:
    - 'http://localhost:8086'  # Replace with your InfluxDB server URL

  # InfluxDB access token (REQUIRED if using InfluxDB)
  # Generate in InfluxDB web interface: Data > Tokens > Generate Token
  token:
    - 'YOUR_INFLUXDB_TOKEN'  # Replace with your actual InfluxDB token

  # InfluxDB organization name (REQUIRED if using InfluxDB)
  org:
    - 'YOUR_INFLUXDB_ORG'  # Replace with your organization name

  # InfluxDB bucket name (REQUIRED if using InfluxDB)
  bucket:
    - 'YOUR_INFLUXDB_BUCKET'  # Replace with your bucket name

  # InfluxDB debug mode (OPTIONAL)
  debug_mode: false  # true = enable debug logs, false = normal logging

################################################################
# QUICK START GUIDE:
################################################################
# 1. REQUIRED steps to get started:
#    - Replace YOUR_PROD_BOT_TOKEN with token from @BotFather
#    - Get your user ID: send message to bot and check logs, or use @userinfobot
#    - Replace 123456789 with your actual Telegram user ID
#    - Replace -1001234567890 with your chat ID for notifications
#    - Generate auth_salt: docker run --rm orenlab/pytmbot:latest --salt
#
# 2. OPTIONAL steps for advanced features:
#    - Configure webhook_config if you don't want to use polling
#      Note: Bot automatically generates secure random webhook paths
#    - Configure plugins_config for monitoring and VPN features
#    - Configure influxdb for data storage and analytics
#
# 3. Security features (automatic):
#    - Webhook URLs include random tokens for security
#    - Rate limiting (10 requests/10 seconds, 5 for 404s)
#    - IP validation (only Telegram servers allowed)
#    - Secret token verification for webhook requests
#    - Automatic IP banning after 50 excessive requests
#
# 4. Test your configuration:
#    - Start with minimal config (only required fields)
#    - Add optional features one by one
#    - Check logs for any configuration errors
#    - Use docker logs to monitor webhook requests
################################################################