import base64
import hashlib
import io

import pyotp
import qrcode

from pytmbot.exceptions import QRCodeError, ErrorContext
from pytmbot.globals import settings
from pytmbot.logs import Logger

logger = Logger()


class TwoFactorAuthenticator:
    def __init__(self, user_id: int, username: str) -> None:
        """
        Initializes the TwoFactorAuthenticator with user ID and username.

        Args:
            user_id (int): The unique identifier for the user.
            username (str): The username of the user.
        """
        self.user_id: int = user_id
        self.username: str = username
        self.salt: str = settings.access_control.auth_salt[0].get_secret_value()

    def __generate_secret(self) -> str:
        """
        Generates a secret key for TOTP (Time-based One-Time Password) authentication.

        The secret key is generated by hashing the concatenation of the user ID and username.

        Returns:
            str: The base32 encoded secret key.
        """
        # Concatenate the user ID, salt, and username
        message = f"{str(self.user_id)}{self.salt}{self.username}".encode()

        # Hash the concatenated message using blake2b
        h = hashlib.blake2b(message, digest_size=64)

        # Encode the hash digest as base32 and decode it to a string
        return base64.b32encode(h.digest()).decode()

    @logger.catch()
    def __generate_totp_auth_uri(self) -> str:
        """
        Generates a TOTP authentication URI using the secret key and account information.

        Returns:
            str: The generated TOTP authentication URI.
        """
        # Generate TOTP object using the secret key
        totp = pyotp.TOTP(self.__generate_secret())

        # Generate the URI using the TOTP object and account name
        uri = totp.provisioning_uri(name=self.username, issuer_name="pyTMbot TOTP")

        # Return the generated TOTP authentication URI
        return uri

    def generate_totp_qr_code(self) -> bytes:
        """
        Generates a QR code for two-factor authentication.

        Returns:
            bytes: The generated QR code as bytes.
        """
        logger.info(f"Starting QR code generation for user: {self.username}...")

        try:
            # Generate the TOTP authentication URI
            auth_uri = self.__generate_totp_auth_uri()

            # Create a QR code from the authentication URI
            qr_code = qrcode.make(auth_uri)

            # Save the QR code as bytes in a BytesIO object
            with io.BytesIO() as img_bytes:
                qr_code.save(img_bytes)

                logger.info(
                    f"QR code successfully generated for user: {self.username}."
                )
                return img_bytes.getvalue()
        except Exception as e:
            raise QRCodeError(ErrorContext(
                message="QR code generation failed.",
                error_code="QR_CODE_GENERATION_ERROR",
                metadata={"original_error": str(e)}
            ))

    def verify_totp_code(self, code: str) -> bool:
        """
        Verifies the TOTP code for the user.

        Args:
            code (str): The TOTP code to be verified.

        Returns:
            bool: True if the TOTP code is verified, False otherwise.
        """
        if not isinstance(code, str) or len(code) != 6:
            logger.error(
                f"Invalid TOTP code format for user {self.username}. Code length must be 6."
            )
            return False

        totp = pyotp.TOTP(self.__generate_secret())
        logger.info(f"Verifying TOTP code for user {self.username}...")

        if totp.verify(code):
            logger.info(
                f"TOTP code successfully verified for user {self.username}."
            )
            return True

        logger.error(f"Failed to verify TOTP code for user {self.username}.")
        return False
